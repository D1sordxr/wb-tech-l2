// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handler

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CalendarEvent defines model for CalendarEvent.
type CalendarEvent struct {
	// CreatedAt Creation timestamp
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Date Event date
	Date *openapi_types.Date `json:"date,omitempty"`

	// Event Event description
	Event *string `json:"event,omitempty"`

	// Id Event identifier
	Id *string `json:"id,omitempty"`

	// UpdatedAt Last update timestamp
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UserId User identifier
	UserId *string `json:"user_id,omitempty"`
}

// CreateEventRequest defines model for CreateEventRequest.
type CreateEventRequest struct {
	// Date Event date in YYYY-MM-DD format
	Date openapi_types.Date `json:"date"`

	// Event Event description/text
	Event string `json:"event"`

	// UserId User identifier
	UserId string `json:"user_id"`
}

// DeleteEventRequest defines model for DeleteEventRequest.
type DeleteEventRequest struct {
	// Id Event identifier
	Id string `json:"id"`

	// UserId User identifier
	UserId string `json:"user_id"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error message description
	Error string `json:"error"`
}

// EventsListResponse defines model for EventsListResponse.
type EventsListResponse struct {
	// Result List of events
	Result []CalendarEvent `json:"result"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// Result Success message
	Result string `json:"result"`
}

// UpdateEventRequest defines model for UpdateEventRequest.
type UpdateEventRequest struct {
	// Date Event date in YYYY-MM-DD format
	Date openapi_types.Date `json:"date"`

	// Event Event description/text
	Event string `json:"event"`

	// Id Event identifier
	Id string `json:"id"`

	// UserId User identifier
	UserId string `json:"user_id"`
}

// GetEventsForDayParams defines parameters for GetEventsForDay.
type GetEventsForDayParams struct {
	// UserId User ID
	UserId string `form:"user_id" json:"user_id"`

	// Date Date in YYYY-MM-DD format
	Date openapi_types.Date `form:"date" json:"date"`
}

// GetEventsForMonthParams defines parameters for GetEventsForMonth.
type GetEventsForMonthParams struct {
	// UserId User ID
	UserId string `form:"user_id" json:"user_id"`

	// DateStart Start date of the month in YYYY-MM-DD format
	DateStart openapi_types.Date `form:"date_start" json:"date_start"`
}

// GetEventsForWeekParams defines parameters for GetEventsForWeek.
type GetEventsForWeekParams struct {
	// UserId User ID
	UserId string `form:"user_id" json:"user_id"`

	// DateStart Start date of the week in YYYY-MM-DD format
	DateStart openapi_types.Date `form:"date_start" json:"date_start"`
}

// PostCreateEventJSONRequestBody defines body for PostCreateEvent for application/json ContentType.
type PostCreateEventJSONRequestBody = CreateEventRequest

// PostCreateEventFormdataRequestBody defines body for PostCreateEvent for application/x-www-form-urlencoded ContentType.
type PostCreateEventFormdataRequestBody = CreateEventRequest

// PostDeleteEventJSONRequestBody defines body for PostDeleteEvent for application/json ContentType.
type PostDeleteEventJSONRequestBody = DeleteEventRequest

// PostDeleteEventFormdataRequestBody defines body for PostDeleteEvent for application/x-www-form-urlencoded ContentType.
type PostDeleteEventFormdataRequestBody = DeleteEventRequest

// PostUpdateEventJSONRequestBody defines body for PostUpdateEvent for application/json ContentType.
type PostUpdateEventJSONRequestBody = UpdateEventRequest

// PostUpdateEventFormdataRequestBody defines body for PostUpdateEvent for application/x-www-form-urlencoded ContentType.
type PostUpdateEventFormdataRequestBody = UpdateEventRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create new event
	// (POST /create_event)
	PostCreateEvent(c *gin.Context)
	// Delete event
	// (POST /delete_event)
	PostDeleteEvent(c *gin.Context)
	// Get events for day
	// (GET /events_for_day)
	GetEventsForDay(c *gin.Context, params GetEventsForDayParams)
	// Get events for month
	// (GET /events_for_month)
	GetEventsForMonth(c *gin.Context, params GetEventsForMonthParams)
	// Get events for week
	// (GET /events_for_week)
	GetEventsForWeek(c *gin.Context, params GetEventsForWeekParams)
	// Update event
	// (POST /update_event)
	PostUpdateEvent(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostCreateEvent operation middleware
func (siw *ServerInterfaceWrapper) PostCreateEvent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCreateEvent(c)
}

// PostDeleteEvent operation middleware
func (siw *ServerInterfaceWrapper) PostDeleteEvent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostDeleteEvent(c)
}

// GetEventsForDay operation middleware
func (siw *ServerInterfaceWrapper) GetEventsForDay(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsForDayParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "date" -------------

	if paramValue := c.Query("date"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument date is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", c.Request.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEventsForDay(c, params)
}

// GetEventsForMonth operation middleware
func (siw *ServerInterfaceWrapper) GetEventsForMonth(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsForMonthParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "date_start" -------------

	if paramValue := c.Query("date_start"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument date_start is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date_start", c.Request.URL.Query(), &params.DateStart)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_start: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEventsForMonth(c, params)
}

// GetEventsForWeek operation middleware
func (siw *ServerInterfaceWrapper) GetEventsForWeek(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsForWeekParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "date_start" -------------

	if paramValue := c.Query("date_start"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument date_start is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date_start", c.Request.URL.Query(), &params.DateStart)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date_start: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEventsForWeek(c, params)
}

// PostUpdateEvent operation middleware
func (siw *ServerInterfaceWrapper) PostUpdateEvent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUpdateEvent(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/create_event", wrapper.PostCreateEvent)
	router.POST(options.BaseURL+"/delete_event", wrapper.PostDeleteEvent)
	router.GET(options.BaseURL+"/events_for_day", wrapper.GetEventsForDay)
	router.GET(options.BaseURL+"/events_for_month", wrapper.GetEventsForMonth)
	router.GET(options.BaseURL+"/events_for_week", wrapper.GetEventsForWeek)
	router.POST(options.BaseURL+"/update_event", wrapper.PostUpdateEvent)
}

type PostCreateEventRequestObject struct {
	JSONBody     *PostCreateEventJSONRequestBody
	FormdataBody *PostCreateEventFormdataRequestBody
}

type PostCreateEventResponseObject interface {
	VisitPostCreateEventResponse(w http.ResponseWriter) error
}

type PostCreateEvent200JSONResponse SuccessResponse

func (response PostCreateEvent200JSONResponse) VisitPostCreateEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCreateEvent400JSONResponse ErrorResponse

func (response PostCreateEvent400JSONResponse) VisitPostCreateEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCreateEvent500Response struct {
}

func (response PostCreateEvent500Response) VisitPostCreateEventResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostCreateEvent503JSONResponse ErrorResponse

func (response PostCreateEvent503JSONResponse) VisitPostCreateEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type PostDeleteEventRequestObject struct {
	JSONBody     *PostDeleteEventJSONRequestBody
	FormdataBody *PostDeleteEventFormdataRequestBody
}

type PostDeleteEventResponseObject interface {
	VisitPostDeleteEventResponse(w http.ResponseWriter) error
}

type PostDeleteEvent200JSONResponse SuccessResponse

func (response PostDeleteEvent200JSONResponse) VisitPostDeleteEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDeleteEvent400JSONResponse ErrorResponse

func (response PostDeleteEvent400JSONResponse) VisitPostDeleteEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostDeleteEvent500Response struct {
}

func (response PostDeleteEvent500Response) VisitPostDeleteEventResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostDeleteEvent503JSONResponse ErrorResponse

func (response PostDeleteEvent503JSONResponse) VisitPostDeleteEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsForDayRequestObject struct {
	Params GetEventsForDayParams
}

type GetEventsForDayResponseObject interface {
	VisitGetEventsForDayResponse(w http.ResponseWriter) error
}

type GetEventsForDay200JSONResponse EventsListResponse

func (response GetEventsForDay200JSONResponse) VisitGetEventsForDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsForDay400JSONResponse ErrorResponse

func (response GetEventsForDay400JSONResponse) VisitGetEventsForDayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsForDay500Response struct {
}

func (response GetEventsForDay500Response) VisitGetEventsForDayResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetEventsForMonthRequestObject struct {
	Params GetEventsForMonthParams
}

type GetEventsForMonthResponseObject interface {
	VisitGetEventsForMonthResponse(w http.ResponseWriter) error
}

type GetEventsForMonth200JSONResponse EventsListResponse

func (response GetEventsForMonth200JSONResponse) VisitGetEventsForMonthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsForMonth400JSONResponse ErrorResponse

func (response GetEventsForMonth400JSONResponse) VisitGetEventsForMonthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsForMonth500Response struct {
}

func (response GetEventsForMonth500Response) VisitGetEventsForMonthResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetEventsForWeekRequestObject struct {
	Params GetEventsForWeekParams
}

type GetEventsForWeekResponseObject interface {
	VisitGetEventsForWeekResponse(w http.ResponseWriter) error
}

type GetEventsForWeek200JSONResponse EventsListResponse

func (response GetEventsForWeek200JSONResponse) VisitGetEventsForWeekResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsForWeek400JSONResponse ErrorResponse

func (response GetEventsForWeek400JSONResponse) VisitGetEventsForWeekResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsForWeek500Response struct {
}

func (response GetEventsForWeek500Response) VisitGetEventsForWeekResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostUpdateEventRequestObject struct {
	JSONBody     *PostUpdateEventJSONRequestBody
	FormdataBody *PostUpdateEventFormdataRequestBody
}

type PostUpdateEventResponseObject interface {
	VisitPostUpdateEventResponse(w http.ResponseWriter) error
}

type PostUpdateEvent200JSONResponse SuccessResponse

func (response PostUpdateEvent200JSONResponse) VisitPostUpdateEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUpdateEvent400JSONResponse ErrorResponse

func (response PostUpdateEvent400JSONResponse) VisitPostUpdateEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUpdateEvent500Response struct {
}

func (response PostUpdateEvent500Response) VisitPostUpdateEventResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostUpdateEvent503JSONResponse ErrorResponse

func (response PostUpdateEvent503JSONResponse) VisitPostUpdateEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create new event
	// (POST /create_event)
	PostCreateEvent(ctx context.Context, request PostCreateEventRequestObject) (PostCreateEventResponseObject, error)
	// Delete event
	// (POST /delete_event)
	PostDeleteEvent(ctx context.Context, request PostDeleteEventRequestObject) (PostDeleteEventResponseObject, error)
	// Get events for day
	// (GET /events_for_day)
	GetEventsForDay(ctx context.Context, request GetEventsForDayRequestObject) (GetEventsForDayResponseObject, error)
	// Get events for month
	// (GET /events_for_month)
	GetEventsForMonth(ctx context.Context, request GetEventsForMonthRequestObject) (GetEventsForMonthResponseObject, error)
	// Get events for week
	// (GET /events_for_week)
	GetEventsForWeek(ctx context.Context, request GetEventsForWeekRequestObject) (GetEventsForWeekResponseObject, error)
	// Update event
	// (POST /update_event)
	PostUpdateEvent(ctx context.Context, request PostUpdateEventRequestObject) (PostUpdateEventResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostCreateEvent operation middleware
func (sh *strictHandler) PostCreateEvent(ctx *gin.Context) {
	var request PostCreateEventRequestObject

	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body PostCreateEventJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/x-www-form-urlencoded") {
		if err := ctx.Request.ParseForm(); err != nil {
			ctx.Error(err)
			return
		}
		var body PostCreateEventFormdataRequestBody
		if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
			ctx.Error(err)
			return
		}
		request.FormdataBody = &body
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCreateEvent(ctx, request.(PostCreateEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCreateEvent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostCreateEventResponseObject); ok {
		if err := validResponse.VisitPostCreateEventResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDeleteEvent operation middleware
func (sh *strictHandler) PostDeleteEvent(ctx *gin.Context) {
	var request PostDeleteEventRequestObject

	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body PostDeleteEventJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/x-www-form-urlencoded") {
		if err := ctx.Request.ParseForm(); err != nil {
			ctx.Error(err)
			return
		}
		var body PostDeleteEventFormdataRequestBody
		if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
			ctx.Error(err)
			return
		}
		request.FormdataBody = &body
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostDeleteEvent(ctx, request.(PostDeleteEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDeleteEvent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostDeleteEventResponseObject); ok {
		if err := validResponse.VisitPostDeleteEventResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsForDay operation middleware
func (sh *strictHandler) GetEventsForDay(ctx *gin.Context, params GetEventsForDayParams) {
	var request GetEventsForDayRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsForDay(ctx, request.(GetEventsForDayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsForDay")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEventsForDayResponseObject); ok {
		if err := validResponse.VisitGetEventsForDayResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsForMonth operation middleware
func (sh *strictHandler) GetEventsForMonth(ctx *gin.Context, params GetEventsForMonthParams) {
	var request GetEventsForMonthRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsForMonth(ctx, request.(GetEventsForMonthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsForMonth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEventsForMonthResponseObject); ok {
		if err := validResponse.VisitGetEventsForMonthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsForWeek operation middleware
func (sh *strictHandler) GetEventsForWeek(ctx *gin.Context, params GetEventsForWeekParams) {
	var request GetEventsForWeekRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsForWeek(ctx, request.(GetEventsForWeekRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsForWeek")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEventsForWeekResponseObject); ok {
		if err := validResponse.VisitGetEventsForWeekResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUpdateEvent operation middleware
func (sh *strictHandler) PostUpdateEvent(ctx *gin.Context) {
	var request PostUpdateEventRequestObject

	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/json") {

		var body PostUpdateEventJSONRequestBody
		if err := ctx.ShouldBindJSON(&body); err != nil {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(ctx.GetHeader("Content-Type"), "application/x-www-form-urlencoded") {
		if err := ctx.Request.ParseForm(); err != nil {
			ctx.Error(err)
			return
		}
		var body PostUpdateEventFormdataRequestBody
		if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
			ctx.Error(err)
			return
		}
		request.FormdataBody = &body
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUpdateEvent(ctx, request.(PostUpdateEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUpdateEvent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostUpdateEventResponseObject); ok {
		if err := validResponse.VisitPostUpdateEventResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
